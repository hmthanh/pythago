// Copyright (C) 2003-2020, Foxit Software Inc..
// All Rights Reserved.
//
// http://www.foxitsoftware.com
//
// The following code is copyrighted and contains proprietary information and trade secrets of Foxit Software Inc..
// You cannot distribute any part of Foxit PDF SDK to any third party or general public,
// unless there is a separate license agreement with Foxit Software Inc. which explicitly grants you such rights.
//
// This file contains an example to demonstrate how to use Foxit PDF SDK to creat a pressure sensitive ink
// and convert it to annotation.

#include <time.h>
#include <iostream>
#if defined(_WIN32) || defined(_WIN64)
#include<direct.h>
#else
#include <sys/stat.h>
#endif

#include "../../../include/common/fs_common.h"
#include "../../../include/pdf/fs_pdfdoc.h"
#include "../../../include/pdf/fs_pdfpage.h"
#include "../../../include/pdf/fs_psi.h"

using namespace std;
using namespace foxit;
using namespace foxit::common;
using foxit::common::Library;
using namespace pdf;
using namespace annots;

static const char* sn = "eUcaj+XFRdwDeV4fx2eGZzF7ZmQiBNInjxfWhiHCIinKYg3KsYgcKg==";
static const char* key = "8f0YFcONvRsJ+nePmKBLSM8bw7bGx79neQeRmlgo13uto3HGtEFz4BLMd5BErJbDU1Nll8omHE6H+Vx20kaMiDQYMDldaA9ctpwcoLODu8yfFtHTm2UseIiHVjqu52IRK18VKf4pLWI6ekSbkAafVjd3XxT8Gv6TtRASa2U4/v/xFR99REZVOqq8tPSQT5b521y1tTBJaTKxB23KwsVuONGlSM8ZH0PiPkjuRmZsfp9aVqpWVSfBMZFqw4+XYbQdImYgzqkq/vgaZ7ApxW0ICzjtIiJ0x/15o+rOFQhMh6+9kSGq4OhjfzY8ZRqTyFQ2dy2SRF+tQKD87bTJUrDkf9mRXbvK+xpDrPpT7dMgTj0R6yjrwJpRt6LcimMv+LvSjbKvAG6KFxn6UMfWVi8bkFM/hzvwRJe/aoyPbYQ72lFMHeYreJNaAKYpO8CBF9mi5KbDDXYNtaoEgUVVukppYbS/wVpdQwlC7J85A9yLmelDEufSbz/RVOwv2LZKHsk6iFgaV4U74YrYiwIT4xE8znliw4xnOd6j+MCBdcmMvOyGKUeNrD7Q042c6Pn5QPGchkmmPuhqwrcnRXYiYEOyMs4LnsdhKSxJk4Q2yoc9b6Fhb8RQbUARzbTfAw9L/ZgooZ2tVhFFJnCFhkU4U76twoB1plg3L2KEAH4smtZjVh0k8uoaDt9JQOk/K5YaKiAI3TPB6AlsaDLguQClqyRsK04OyO/CZkoPsvLoGa1EyBpppKcwOe3PyF4zYuNEQRRZh48L/5loWJPf+ynWj1fR+NcVnTqe8GqFk0vP3uK5C8FaJxKP3a0bekr0tKCfe4yxte4Ej8yo/3plnDz03GXUB+FgsdMINm3rA2UhTNdYjRJtIRNJomCkjQr7GHyEsTq71Q6O0wuOSet0byPcLPPhcXzsSqpWYZ9+opORXE92LCwuHJRZOtuzpjvAphi0kiCRk4dSR0VP8FmL5yNG2M2okeEb8bjXD52ErTBTIAk3VZnh4OOCSfzgpZhoEvr5usjkfyry9BmgX2gWAJYRTUrEgDTXHj5YQ6MT3grfDGYMqKoy7GSpb3tY5zBHzzoJDK/E1VvO+ScyQaJQJ0eHgsgy2QZbCnEB3W4N5M8HqBqNMw+0oUvqw0P1i4uK9XwCGzVyyOXs1czCsWGg8R8Ej51AL+9gXdu7RMdEaP2lTMkOJfScJbzsOkfjxvX5LBrHVZ98XuzZylbeFkVr/gjrvBnfucL9zCmjngYq4RfzDYBOzx31gRuFFAsllK4zFRgtHWSXGXwXim4OJpMVKEuFHO5Oupowvd9cdzRIjGpWzR0=";

#if defined(_WIN32) || defined(_WIN64)
static WString output_path = WString::FromLocal("../output_files/");
static WString input_path = WString::FromLocal("../input_files/");
#else
static WString output_path = WString::FromLocal("./output_files/");
static WString input_path = WString::FromLocal("./input_files/");
#endif

class SdkLibMgr {
public:
  SdkLibMgr() : is_initialize_(false){};
  ErrorCode Initialize() {
    ErrorCode error_code = Library::Initialize(sn, key);
    if (error_code != foxit::e_ErrSuccess) {
      printf("Library Initialize Error: %d\n", error_code);
    } else {
      is_initialize_ = true;
    }
    return error_code;

  }
  ~SdkLibMgr(){
    if(is_initialize_)
      Library::Release();
  }
private:
  bool is_initialize_;
};

float kPointsData[] = {
  1, 121.3043f, 326.6846f, 0.0966f, 2, 121.1304f, 326.8709f, 0.1376f, 2, 121.1304f, 326.9641f, 0.1484f,
  2, 121.1304f, 327.0572f, 0.2226f, 2, 121.1304f, 327.2435f, 0.3203f, 2, 121.1304f, 327.5230f, 0.3916f,
  2, 121.0434f, 327.6161f, 0.4482f, 2, 121.0434f, 327.6161f, 0.5078f, 2, 121.0434f, 327.6161f, 0.5556f,
  2, 121.0434f, 327.7093f, 0.5810f, 2, 121.0434f, 327.8024f, 0.5966f, 2, 121.0434f, 328.1751f, 0.6064f,
  2, 121.0434f, 328.7340f, 0.6347f, 2, 121.0434f, 329.4792f, 0.6572f, 2, 121.1304f, 330.1313f, 0.6796f,
  2, 121.4782f, 330.7833f, 0.7041f, 2, 122.0000f, 331.4354f, 0.7275f, 2, 122.9565f, 331.9943f, 0.7363f,
  2, 124.2608f, 332.3669f, 0.7470f, 2, 126.3478f, 332.5532f, 0.7695f, 2, 129.2173f, 332.5532f, 0.7978f,
  2, 132.6086f, 332.2738f, 0.8125f, 2, 136.5217f, 330.8765f, 0.8203f, 2, 140.6956f, 328.9203f, 0.8281f,
  2, 144.7826f, 326.7778f, 0.8300f, 2, 148.6086f, 324.6353f, 0.8281f, 2, 152.1739f, 322.6791f, 0.8291f,
  2, 155.2173f, 321.0955f, 0.8281f, 2, 158.0000f, 319.7914f, 0.8261f, 2, 160.1739f, 319.0462f, 0.8154f,
  2, 161.7391f, 318.7667f, 0.7812f, 2, 162.7826f, 318.7667f, 0.7285f, 2, 163.3043f, 318.8598f, 0.6650f,
  2, 163.3043f, 320.5366f, 0.5869f, 2, 162.7826f, 323.7969f, 0.4257f, 2, 160.6086f, 328.7340f, 0.1025f,
  3, 160.6086f, 328.7340f, 0.0000f, 1, 132.7826f, 391.0528f, 0.2226f, 2, 128.6086f, 399.4365f, 0.2353f,
  2, 127.3043f, 402.0447f, 0.3017f, 2, 126.6086f, 403.6283f, 0.3876f, 2, 126.3478f, 404.5599f, 0.4560f,
  2, 126.3478f, 404.6530f, 0.4746f, 2, 126.3478f, 404.6530f, 0.4931f, 2, 127.1304f, 404.6530f, 0.5185f,
  2, 129.3913f, 403.4420f, 0.5966f, 2, 132.7826f, 400.8338f, 0.6445f, 2, 136.9565f, 396.9214f, 0.6699f,
  2, 141.3913f, 392.0775f, 0.6904f, 2, 146.0869f, 386.6746f, 0.7011f, 2, 150.9565f, 381.1786f, 0.7031f,
  2, 155.7391f, 375.9621f, 0.7050f, 2, 160.0000f, 371.3045f, 0.7041f, 2, 163.3043f, 367.6716f, 0.6943f,
  2, 165.3913f, 365.2496f, 0.6562f, 2, 166.3478f, 364.1318f, 0.5927f, 2, 166.3478f, 363.8523f, 0.5048f,
  2, 166.3478f, 363.8523f, 0.3769f, 2, 164.6086f, 364.6907f, 0.1406f, 3, 164.6086f, 364.6907f, 0.0000f,
  1, 133.0434f, 365.9017f, 0.4531f, 2, 132.7826f, 364.9702f, 0.4648f, 2, 132.6086f, 364.9702f, 0.4726f,
  2, 132.4347f, 365.0633f, 0.4833f, 2, 132.2608f, 367.0195f, 0.5117f, 2, 132.1739f, 370.5593f, 0.5410f,
  2, 132.0869f, 375.9621f, 0.5712f, 2, 132.0869f, 382.6691f, 0.5986f, 2, 132.0869f, 390.4939f, 0.6250f,
  2, 132.0869f, 399.2502f, 0.6582f, 2, 132.0869f, 408.3791f, 0.6767f, 2, 132.2608f, 417.8806f, 0.6835f,
  2, 132.4347f, 427.0095f, 0.6855f, 2, 132.9565f, 435.3001f, 0.6845f, 2, 133.7391f, 442.6591f, 0.6845f,
  2, 134.8695f, 448.6208f, 0.6816f, 2, 136.0869f, 453.3716f, 0.6708f, 2, 137.3043f, 456.8182f, 0.6162f,
  2, 138.4347f, 458.7744f, 0.4580f, 2, 139.3043f, 458.7744f, 0.1357f, 3, 139.3043f, 458.7744f, 0.0000f,
  1, 208.9565f, 372.3292f, 0.4394f, 2, 209.5652f, 371.0251f, 0.4755f, 2, 208.0869f, 373.3539f, 0.4863f,
  2, 205.6521f, 377.8252f, 0.5556f, 2, 203.0434f, 383.9732f, 0.6230f, 2, 200.7826f, 391.0528f, 0.6611f,
  2, 199.3913f, 397.5734f, 0.6777f, 2, 199.2173f, 402.9763f, 0.6884f, 2, 199.2173f, 406.6092f, 0.6943f,
  2, 200.6956f, 408.8448f, 0.6953f, 2, 202.6956f, 409.8695f, 0.6943f, 2, 205.4782f, 409.8695f, 0.6914f,
  2, 208.4347f, 409.4969f, 0.6933f, 2, 211.3913f, 406.8887f, 0.6972f, 2, 214.0869f, 403.0694f, 0.7021f,
  2, 216.0869f, 398.2255f, 0.7060f, 2, 217.5652f, 392.9158f, 0.7099f, 2, 218.2608f, 387.7925f, 0.7109f,
  2, 218.3478f, 383.4143f, 0.7109f, 2, 218.3478f, 380.0608f, 0.7119f, 2, 217.0434f, 378.1046f, 0.7109f,
  2, 215.1304f, 377.1731f, 0.7128f, 2, 212.7826f, 376.9868f, 0.7138f, 2, 210.0869f, 376.9868f, 0.7138f,
  2, 207.7391f, 377.2662f, 0.7109f, 2, 205.4782f, 378.3841f, 0.7050f, 2, 204.0000f, 379.5951f, 0.6777f,
  2, 203.3043f, 380.6197f, 0.6064f, 2, 203.3043f, 381.5513f, 0.4521f, 2, 203.7391f, 381.9239f, 0.2031f,
  3, 203.7391f, 381.9239f, 0.0000f, 1, 230.6086f, 374.0991f, 0.2548f, 2, 234.5217f, 372.2360f, 0.3183f,
  2, 236.3478f, 371.6771f, 0.4150f, 2, 238.0000f, 371.1182f, 0.5039f, 2, 239.8260f, 370.9319f, 0.5742f,
  2, 241.7391f, 370.9319f, 0.6152f, 2, 243.9130f, 370.9319f, 0.6503f, 2, 246.6086f, 372.5155f, 0.6777f,
  2, 249.4782f, 375.1238f, 0.7187f, 2, 252.4347f, 378.9430f, 0.7617f, 2, 255.3913f, 383.9732f, 0.7968f,
  2, 258.0869f, 389.4692f, 0.8115f, 2, 260.8695f, 394.5926f, 0.8164f, 2, 263.9130f, 399.1570f, 0.8203f,
  2, 267.2173f, 402.3242f, 0.8193f, 2, 270.6087f, 404.2804f, 0.8183f, 2, 273.6521f, 405.3982f, 0.8066f,
  2, 275.9130f, 405.5845f, 0.7587f, 2, 277.3043f, 405.5845f, 0.6923f, 2, 277.9130f, 404.3735f, 0.6230f,
  2, 277.9130f, 402.2310f, 0.5488f, 2, 277.9130f, 399.1570f, 0.4580f, 2, 277.6521f, 395.3378f, 0.3496f,
  2, 277.2173f, 390.9596f, 0.2626f, 2, 276.8695f, 386.5815f, 0.2509f, 2, 276.6956f, 382.8554f, 0.2646f,
  2, 276.5217f, 379.9677f, 0.3027f, 2, 276.0000f, 378.1978f, 0.3759f, 2, 275.3912f, 377.4526f, 0.4580f,
  2, 274.3478f, 377.4526f, 0.5175f, 2, 272.9565f, 377.8252f, 0.5419f, 2, 270.9565f, 380.0608f, 0.5654f,
  2, 268.3478f, 383.5075f, 0.5927f, 2, 265.1304f, 388.2582f, 0.6054f, 2, 261.8260f, 393.3816f, 0.6210f,
  2, 258.8695f, 398.5981f, 0.6298f, 2, 256.1739f, 403.1625f, 0.6337f, 2, 254.3478f, 406.8887f, 0.6347f,
  2, 253.1304f, 409.8695f, 0.6347f, 2, 252.5217f, 411.8257f, 0.6337f, 2, 252.5217f, 412.8504f, 0.6074f,
  2, 252.5217f, 412.8504f, 0.5322f, 2, 254.1739f, 412.7572f, 0.4423f, 2, 256.6087f, 410.7079f, 0.3115f,
  2, 259.8260f, 407.5407f, 0.0751f, 3, 259.8260f, 407.5407f, 0.0000f, 1, 278.6956f, 392.2637f, 0.0058f,
  2, 288.8695f, 386.0226f, 0.0869f, 2, 293.2173f, 383.2280f, 0.1894f, 2, 297.3912f, 380.8060f, 0.2763f,
  2, 301.1304f, 378.6635f, 0.3251f, 2, 304.4347f, 376.8005f, 0.3623f, 2, 307.1304f, 375.7758f, 0.3955f,
  2, 308.8695f, 375.5895f, 0.4121f, 2, 309.9130f, 375.5895f, 0.4462f, 2, 310.2608f, 377.5457f, 0.5107f,
  2, 310.2608f, 380.5266f, 0.5634f, 2, 310.2608f, 384.4390f, 0.6035f, 2, 309.8260f, 388.8171f, 0.6367f,
  2, 309.2173f, 393.1021f, 0.6513f, 2, 308.6956f, 397.2008f, 0.6572f, 2, 308.5217f, 400.6474f, 0.6582f,
  2, 308.5217f, 403.3489f, 0.6591f, 2, 308.5217f, 405.2119f, 0.6591f, 2, 308.7826f, 406.3297f, 0.6552f,
  2, 309.3912f, 406.4229f, 0.6337f, 2, 310.4347f, 406.4229f, 0.5996f, 2, 312.0000f, 404.1872f, 0.5625f,
  2, 314.1739f, 400.4611f, 0.5195f, 2, 316.9565f, 395.2446f, 0.4765f, 2, 320.2608f, 388.7240f, 0.3886f,
  2, 324.0869f, 380.8992f, 0.2910f, 2, 328.2608f, 372.5155f, 0.2001f, 2, 332.2608f, 364.5044f, 0.1611f,
  2, 335.9130f, 357.7043f, 0.1845f, 2, 338.7826f, 352.4878f, 0.2294f, 2, 340.7826f, 349.1343f, 0.3066f,
  2, 342.0869f, 347.3644f, 0.3994f, 2, 342.7826f, 346.4329f, 0.4951f, 2, 343.0434f, 346.4329f, 0.5595f,
  2, 343.0434f, 346.4329f, 0.5810f, 2, 343.0434f, 346.7124f, 0.5966f, 2, 343.0434f, 348.7617f, 0.6328f,
  2, 343.0434f, 352.4878f, 0.6513f, 2, 342.6087f, 358.2632f, 0.6689f, 2, 341.8260f, 366.5538f, 0.6904f,
  2, 341.1304f, 376.0553f, 0.7089f, 2, 340.7826f, 385.6499f, 0.7236f, 2, 340.6956f, 394.3131f, 0.7265f,
  2, 340.6956f, 401.1132f, 0.7275f, 2, 340.8695f, 405.8640f, 0.7285f, 2, 341.9130f, 408.8448f, 0.7255f,
  2, 343.6521f, 410.2421f, 0.7216f, 2, 345.8260f, 410.4284f, 0.7216f, 2, 348.6087f, 410.1490f, 0.7246f,
  2, 351.8260f, 407.8202f, 0.7314f, 2, 355.2173f, 404.2804f, 0.7353f, 2, 358.1739f, 399.9954f, 0.7314f,
  2, 360.5217f, 395.4309f, 0.7021f, 2, 362.0869f, 390.9596f, 0.6689f, 2, 362.5217f, 386.8609f, 0.6376f,
  2, 362.5217f, 383.2280f, 0.6123f, 2, 361.5652f, 379.9677f, 0.5761f, 2, 359.3043f, 377.2662f, 0.5312f,
  2, 356.2608f, 374.9375f, 0.5126f, 2, 352.6956f, 373.1676f, 0.5087f, 2, 348.7826f, 371.7703f, 0.5000f,
  2, 344.6087f, 370.5593f, 0.4765f, 2, 340.9565f, 369.1620f, 0.4589f, 2, 338.0000f, 367.6716f, 0.4589f,
  2, 336.0869f, 366.2743f, 0.4775f, 2, 335.1304f, 365.0633f, 0.5058f, 2, 335.0434f, 364.3181f, 0.5566f,
  2, 335.0434f, 363.7592f, 0.5839f, 2, 336.6956f, 363.0140f, 0.6162f, 2, 339.6521f, 361.9893f, 0.6523f,
  2, 343.8260f, 360.5920f, 0.6826f, 2, 349.3043f, 359.0084f, 0.7001f, 2, 355.3912f, 357.2385f, 0.7089f,
  2, 361.3912f, 355.2823f, 0.7119f, 2, 366.6087f, 353.4193f, 0.7099f, 2, 370.5217f, 351.7426f, 0.7109f,
  2, 373.1304f, 350.5316f, 0.6972f, 2, 374.4347f, 349.9727f, 0.6660f, 2, 374.7826f, 349.6932f, 0.6347f,
  2, 374.6956f, 349.6932f, 0.5976f, 2, 372.7826f, 349.6932f, 0.4843f, 2, 369.7391f, 349.7864f, 0.2900f,
  3, 369.7391f, 349.7864f, 0.0000f, 1, 288.9565f, 335.4409f, 0.4951f, 2, 287.2173f, 334.9752f, 0.5009f,
  2, 285.8260f, 334.9752f, 0.5410f, 2, 285.3043f, 334.9752f, 0.6191f, 2, 285.3043f, 334.9752f, 0.6826f,
  2, 285.3043f, 334.9752f, 0.7089f, 2, 285.3043f, 334.9752f, 0.7177f, 2, 285.3043f, 334.9752f, 0.7148f,
  2, 285.9130f, 334.9752f, 0.7158f, 2, 287.3912f, 335.1615f, 0.7285f, 2, 289.3912f, 336.2793f, 0.7373f,
  2, 292.0000f, 337.6766f, 0.7412f, 2, 294.6087f, 339.4465f, 0.7412f, 2, 296.8695f, 341.4027f, 0.7255f,
  2, 298.9565f, 343.5452f, 0.6357f, 2, 300.3478f, 345.7808f, 0.3662f, 3, 300.3478f, 345.7808f, 0.0000f,
  1, 421.9130f, 351.5563f, 0.2861f, 2, 422.1739f, 349.6000f, 0.3564f, 2, 422.3478f, 348.5754f, 0.4189f,
  2, 422.6956f, 347.4576f, 0.5234f, 2, 423.0434f, 346.1534f, 0.6025f, 2, 423.5652f, 344.7561f, 0.6406f,
  2, 423.9130f, 343.5452f, 0.6699f, 2, 424.1739f, 342.5205f, 0.7001f, 2, 424.1739f, 341.7753f, 0.7285f,
  2, 424.1739f, 341.4027f, 0.7460f, 2, 424.0869f, 341.2164f, 0.7500f, 2, 423.1304f, 341.2164f, 0.7519f,
  2, 421.8260f, 341.2164f, 0.7500f, 2, 420.0869f, 341.8684f, 0.7509f, 2, 417.4782f, 343.9178f, 0.7490f,
  2, 414.5217f, 346.7124f, 0.7480f, 2, 411.4782f, 349.8795f, 0.7490f, 2, 408.6956f, 352.9535f, 0.7490f,
  2, 406.6956f, 355.6549f, 0.7460f, 2, 405.3912f, 358.0769f, 0.7441f, 2, 404.6956f, 360.4989f, 0.7333f,
  2, 404.5217f, 362.9208f, 0.7197f, 2, 404.5217f, 365.3428f, 0.7148f, 2, 405.1304f, 367.8579f, 0.7099f,
  2, 406.8695f, 370.0935f, 0.7089f, 2, 409.5652f, 372.0497f, 0.7089f, 2, 412.8695f, 373.8196f, 0.7070f,
  2, 416.6956f, 375.3101f, 0.7109f, 2, 420.4347f, 376.8937f, 0.7109f, 2, 423.7391f, 378.4772f, 0.7138f,
  2, 426.6087f, 380.0608f, 0.7148f, 2, 428.8695f, 381.5513f, 0.7158f, 2, 430.6087f, 383.2280f, 0.7177f,
  2, 431.8260f, 384.9979f, 0.7177f, 2, 432.2608f, 387.1404f, 0.7216f, 2, 432.2608f, 389.6555f, 0.7333f,
  2, 431.4782f, 392.2637f, 0.7421f, 2, 429.4782f, 395.0583f, 0.7519f, 2, 427.0434f, 397.4803f, 0.7597f,
  2, 424.3478f, 399.8091f, 0.7626f, 2, 421.3043f, 401.5790f, 0.7705f, 2, 418.0869f, 402.9763f, 0.7695f,
  2, 414.7826f, 403.9078f, 0.7714f, 2, 412.1739f, 404.2804f, 0.7695f, 2, 410.1739f, 404.2804f, 0.7460f,
  2, 409.3043f, 404.2804f, 0.6972f, 2, 409.3043f, 402.6036f, 0.5537f, 2, 409.9130f, 400.0885f, 0.0917f,
  3, 409.9130f, 400.0885f, 0.0000f, 1, 470.1739f, 346.6192f, 0.4121f, 2, 468.1739f, 345.4082f, 0.4462f,
  2, 466.5217f, 345.4082f, 0.4990f, 2, 465.0434f, 345.4082f, 0.5800f, 2, 463.8260f, 345.4082f, 0.6367f,
  2, 463.0434f, 346.0603f, 0.6640f, 2, 462.5217f, 346.8986f, 0.6748f, 2, 462.1739f, 348.6685f, 0.6826f,
  2, 461.7391f, 351.9289f, 0.6972f, 2, 461.4782f, 357.0522f, 0.7285f, 2, 461.2173f, 363.9455f, 0.7490f,
  2, 461.1304f, 371.9566f, 0.7607f, 2, 460.9565f, 380.1540f, 0.7812f, 2, 460.8695f, 387.6993f, 0.7939f,
  2, 460.7826f, 393.9405f, 0.7988f, 2, 460.7826f, 398.8775f, 0.8027f, 2, 460.7826f, 402.4173f, 0.7998f,
  2, 460.7826f, 404.8393f, 0.8007f, 2, 461.3912f, 406.3297f, 0.7998f, 2, 461.9130f, 406.9818f, 0.7714f,
  2, 462.2608f, 406.9818f, 0.7158f, 2, 462.4347f, 406.1434f, 0.6660f, 2, 462.5217f, 403.7215f, 0.5742f,
  2, 462.5217f, 400.0885f, 0.4101f, 2, 462.5217f, 395.4309f, 0.1992f, 3, 462.5217f, 395.4309f, 0.0000f,
  1, 458.7826f, 362.0824f, 0.2851f, 2, 458.0000f, 357.7974f, 0.3554f, 2, 458.0000f, 357.0522f, 0.4003f,
  2, 458.3478f, 356.4002f, 0.4472f, 2, 460.2608f, 355.6549f, 0.5078f, 2, 463.1304f, 354.6303f, 0.5410f,
  2, 466.6956f, 353.8851f, 0.5722f, 2, 470.6087f, 353.5125f, 0.6005f, 2, 474.3478f, 353.5125f, 0.6240f,
  2, 477.5652f, 353.5125f, 0.6347f, 2, 480.0000f, 355.1892f, 0.6464f, 2, 481.8260f, 358.2632f, 0.6591f,
  2, 482.9565f, 362.5482f, 0.6875f, 2, 483.5652f, 367.3921f, 0.7060f, 2, 483.6521f, 372.7018f, 0.7187f,
  2, 483.6521f, 377.8252f, 0.7294f, 2, 483.1304f, 382.6691f, 0.7373f, 2, 481.4782f, 387.3267f, 0.7392f,
  2, 479.3043f, 391.7048f, 0.7421f, 2, 476.4347f, 395.8035f, 0.7441f, 2, 473.3043f, 399.6228f, 0.7460f,
  2, 469.6521f, 403.3489f, 0.7480f, 2, 466.0000f, 406.7023f, 0.7500f, 2, 462.6956f, 409.5901f, 0.7490f,
  2, 460.3478f, 411.7326f, 0.7451f, 2, 459.1304f, 412.9435f, 0.6982f, 2, 459.1304f, 413.0367f, 0.6054f,
  2, 459.9130f, 412.9435f, 0.4189f, 3, 459.9130f, 412.9435f, 0.0000f, 1, 508.6087f, 352.8604f, 0.4580f,
  2, 508.6087f, 351.8357f, 0.5214f, 2, 508.3478f, 351.8357f, 0.5830f, 2, 507.9130f, 352.3946f, 0.6289f,
  2, 507.2173f, 354.8166f, 0.6582f, 2, 506.3478f, 359.3810f, 0.6933f, 2, 505.2173f, 366.0880f, 0.7294f,
  2, 504.3478f, 374.7511f, 0.7578f, 2, 503.8260f, 383.6006f, 0.7783f, 2, 503.4782f, 391.6117f, 0.7919f,
  2, 503.3912f, 398.2255f, 0.7958f, 2, 503.3912f, 403.2557f, 0.7978f, 2, 503.3912f, 407.1681f, 0.7988f,
  2, 503.3912f, 410.0558f, 0.7910f, 2, 503.7391f, 411.6394f, 0.7363f, 2, 504.2608f, 412.2915f, 0.6376f,
  2, 505.1304f, 412.2915f, 0.4560f, 2, 506.2608f, 409.8695f, 0.0976f, 3, 506.2608f, 409.8695f, 0.0000f,
  1, 522.9565f, 371.7703f, 0.2607f, 2, 527.2174f, 366.2743f, 0.3037f, 2, 527.9130f, 365.3428f, 0.4169f,
  2, 528.0869f, 365.0633f, 0.5478f, 2, 528.0869f, 365.0633f, 0.6328f, 2, 527.6521f, 365.0633f, 0.6767f,
  2, 525.9130f, 365.9017f, 0.6806f, 2, 523.6521f, 367.7647f, 0.6865f, 2, 520.8695f, 370.6524f, 0.6904f,
  2, 517.8261f, 374.5648f, 0.6933f, 2, 515.1304f, 378.9430f, 0.6962f, 2, 512.6087f, 383.1348f, 0.6962f,
  2, 510.6087f, 386.5815f, 0.6982f, 2, 509.2173f, 389.1897f, 0.6972f, 2, 508.3478f, 390.9596f, 0.6982f,
  2, 507.9130f, 392.2637f, 0.6992f, 2, 507.7391f, 393.1953f, 0.6992f, 2, 507.7391f, 394.0336f, 0.7050f,
  2, 507.7391f, 394.7789f, 0.7158f, 2, 507.7391f, 395.7104f, 0.7246f, 2, 508.0000f, 396.7351f, 0.7373f,
  2, 509.0434f, 397.8529f, 0.7558f, 2, 510.5217f, 398.9707f, 0.7773f, 2, 512.5217f, 399.9954f, 0.7998f,
  2, 514.9565f, 400.9269f, 0.8144f, 2, 518.0000f, 401.6721f, 0.8203f, 2, 521.4782f, 402.3242f, 0.8378f,
  2, 525.3912f, 402.6968f, 0.8476f, 2, 529.5652f, 402.7900f, 0.8603f, 2, 533.7391f, 402.7900f, 0.8671f,
  2, 537.5652f, 402.7900f, 0.8710f, 2, 540.8695f, 402.7900f, 0.8769f, 2, 543.4782f, 402.7900f, 0.8789f,
  2, 545.3912f, 402.7900f, 0.8798f, 2, 546.5217f, 402.7900f, 0.8808f, 2, 547.1304f, 402.7900f, 0.8808f,
  2, 547.3043f, 402.7900f, 0.8828f, 2, 547.3043f, 402.7900f, 0.8916f, 2, 547.3043f, 402.7900f, 0.9023f,
  2, 547.3043f, 402.7900f, 0.9101f, 2, 546.9565f, 402.7900f, 0.9150f, 2, 546.7825f, 402.7900f, 0.9160f,
  2, 546.6087f, 402.6968f, 0.8955f, 2, 546.4347f, 402.5105f, 0.8408f, 2, 546.2608f, 402.3242f, 0.7363f,
  2, 546.0869f, 402.0447f, 0.5322f, 3, 546.0869f, 402.0447f, 0.0000f};

int main(int argc, char *argv[])
{
  WString output_directory = output_path + L"psi/";
#if defined(_WIN32) || defined(_WIN64)
  _mkdir(String::FromUnicode(output_directory));
#else
  mkdir(String::FromUnicode(output_directory), S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);
#endif

  int err_ret = 0;
  WString input_file = input_path + L"AboutFoxit.pdf";
  SdkLibMgr sdk_lib_mgr;
  // Initialize library
  ErrorCode error_code = sdk_lib_mgr.Initialize();
  if (error_code != foxit::e_ErrSuccess) {
    return 1;
  }

  try {
    PSI psi(480, 180, true);

    // Set ink diameter.
    psi.SetDiameter(9);

    // Set ink color .
    psi.SetColor(0x434236);

    // Set ink opacity.
    psi.SetOpacity(0.8f);

    // Add points to pressure sensitive ink.
    for (int i = 0; i < sizeof(kPointsData) / sizeof(kPointsData[0]); i += 4) {
      float x = kPointsData[i + 1] - 100.f;
      float y = kPointsData[i + 2] - 300.f;
      float pressure = kPointsData[i + 3];
      Path::PointType type = Path::PointType((int)kPointsData[i]);
      psi.AddPoint(PointF(x, y), type, pressure);
    }

    Image image;
    image.AddFrame(psi.GetBitmap());
    WString output_file = output_directory + L"pressure_sensitive_ink.bmp";
    image.SaveAs(output_file);

    PDFDoc doc;
    PDFPage page = doc.InsertPage(0);

    // Convert PSI to PSInk annotation.
    float width = 480.f;
    float height = 180.f;
    foxit::RectF rect(page.GetWidth() / 2 - width / 2, page.GetHeight() / 2 - height / 2,
      page.GetWidth() / 2 + width / 2, page.GetHeight() / 2 + height / 2);

    Annot annot = psi.ConvertToPDFAnnot(page, rect, e_Rotation0);

    output_file = output_directory + L"pressure_sensitive_ink.pdf";
    doc.SaveAs(output_file, PDFDoc::e_SaveFlagNormal);

    cout << "PSI test." << endl;

  } catch (const Exception& e) {
    cout << e.GetMessage() << endl;
    err_ret = 1;
  }
  catch(...)
  {
    cout << "Unknown Exception" << endl;
    err_ret = 1;
  }

  return err_ret;
}

